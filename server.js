// –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π server.js, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç:
// –û—Ç–¥–∞–≤–∞—Ç—å —Ç–≤–æ–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã(HTML, CSS, JS)
// –ü–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –±–∞–∑–µ PostgreSQL –Ω–∞ Render
// –°–æ–¥–µ—Ä–∂–∞—Ç—å API / api / cards –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
// –í–æ—Ç –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥ –¥–ª—è server.js:

// –û—Ç–ª–∏—á–Ω–æ, —ç—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π server.js –¥–ª—è Render. ‚úÖ
// –í–æ—Ç —á—Ç–æ –≤–∞–∂–Ω–æ:
// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã ‚Äî –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç(HTML, CSS, JS, –∫–∞—Ä—Ç–∏–Ω–∫–∏) –æ—Ç–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ express.static.
// PostgreSQL ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pg –∫ –±–∞–∑–µ Render —Å SSL.
// API / api / cards ‚Äî —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏(GET) –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å(POST) –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–µ.
// –¢–∞–±–ª–∏—Ü–∞ cards —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç.

// =======================================
// server.js ‚Äî —Ä–∞–±–æ—á–∏–π –¥–ª—è Render PostgreSQL
// =======================================



// =======================================
// server.js ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –¥–ª—è Render
// =======================================
// =======================================
// –ò–º–ø–æ—Ä—Ç—ã
// =======================================


const express = require("express");
const path = require("path");
const { Pool } = require("pg");
const multer = require("multer");
const cloudinary = require("cloudinary").v2;
const { CloudinaryStorage } = require("multer-storage-cloudinary");

const app = express();
const PORT = process.env.PORT || 3000;

// =======================================
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ PostgreSQL (Render)
// =======================================
// DATABASE_URL —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ Environment Variables –Ω–∞ Render
const pool = new Pool({
	connectionString: process.env.DATABASE_URL,
	ssl: { rejectUnauthorized: false }, // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Render
});

// =======================================
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
// =======================================
// CLOUDINARY_CLOUD_NAME, CLOUDINARY_API_KEY, CLOUDINARY_API_SECRET
// —Ç–æ–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Render ‚Üí Environment Variables
cloudinary.config({
	cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
	api_key: process.env.CLOUDINARY_API_KEY,
	api_secret: process.env.CLOUDINARY_API_SECRET,
});

// =======================================
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Multer + Cloudinary
// =======================================
// Multer-storage-cloudinary –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ –æ–±–ª–∞–∫–æ
// –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É
const storage = new CloudinaryStorage({
	cloudinary: cloudinary,
	params: {
		folder: "my-online-store", // –ø–∞–ø–∫–∞ –≤ Cloudinary
		allowed_formats: ["jpg", "jpeg", "png", "gif"], // –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
	},
});
const upload = multer({ storage });

// =======================================
// Middleware
// =======================================
// –ß—Ç–æ–±—ã Express —É–º–µ–ª —á–∏—Ç–∞—Ç—å JSON –∏ –æ—Ç–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç–∏–∫—É (HTML/JS/CSS)
app.use(express.json());
app.use(express.static(path.join(__dirname)));

// =======================================
// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã cards (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
// =======================================
// –¢–∞–±–ª–∏—Ü–∞ —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
async function createTableIfNotExists() {
	try {
		await pool.query(`
      CREATE TABLE IF NOT EXISTS cards (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        price TEXT NOT NULL,
        description TEXT,
        availability TEXT,
        imgSrc TEXT,
        date TEXT
      )
    `);
		console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ cards –≥–æ—Ç–æ–≤–∞");
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", err);
	}
}
createTableIfNotExists();

// =======================================
// API –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
// =======================================

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
app.get("/api/cards", async (req, res) => {
	try {
		const { rows } = await pool.query("SELECT * FROM cards ORDER BY id ASC");
		res.json(rows);
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫" });
	}
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ)
app.post("/api/cards", async (req, res) => {
	const cards = req.body;
	try {
		// –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
		await pool.query("TRUNCATE cards");

		// –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
		for (const c of cards) {
			await pool.query(
				"INSERT INTO cards (name, price, description, availability, imgSrc, date) VALUES ($1,$2,$3,$4,$5,$6)",
				[c.name, c.price, c.description, c.availability, c.imgSrc, c.date]
			);
		}

		res.json({ status: "ok" });
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫" });
	}
});

// =======================================
// API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω–∞ Cloudinary
// =======================================
// –ö–æ–≥–¥–∞ —Ñ—Ä–æ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST /api/upload —Å —Ñ–∞–π–ª–æ–º,
// multer-storage-cloudinary —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –≤ –æ–±–ª–∞–∫–æ
app.post("/api/upload", upload.single("photo"), (req, res) => {
	try {
		if (!req.file || !req.file.path) {
			console.error("‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, req.file:", req.file);
			return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", file: req.file });
		}
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
		res.json({ url: req.file.path }); // —Ç–µ–ø–µ—Ä—å —Ñ—Ä–æ–Ω—Ç –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ url
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ", details: err });
	}
});

// =======================================
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// =======================================
app.listen(PORT, () => {
	console.log(`üöÄ Server is running on port ${PORT}`);
});


// –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:
// Cloudinary —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è cloud_name, api_key, api_secret, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ Environment Variables –≤ Render.
// –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –æ–±–ª–∞–∫–µ Cloudinary, URL —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ.
// –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ uploadsfoto –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞.
// –ù–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º —Å–∫—Ä–∏–ø—Ç–µ(main.js) –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ FormData –Ω–∞ / api / upload, –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ —Ä–∞–Ω—å—à–µ.
// –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–≤–æ–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π JS —Å—Ä–∞–∑—É –ø–æ–¥ Cloudinary, —á—Ç–æ–±—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ä–µ–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.
