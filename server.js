const express = require("express");
const path = require("path");
const { Pool } = require("pg");
const mongoose = require("mongoose");
const multer = require("multer");
const cloudinary = require("cloudinary").v2;
const { CloudinaryStorage } = require("multer-storage-cloudinary");
const cors = require("cors");

const app = express();
const PORT = process.env.PORT || 3000;

// =======================================
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
// =======================================
cloudinary.config({
	cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
	api_key: process.env.CLOUDINARY_API_KEY,
	api_secret: process.env.CLOUDINARY_API_SECRET,
});

console.log("üîë Cloudinary –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è:", process.env.CLOUDINARY_CLOUD_NAME);

// =======================================
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Multer + Cloudinary –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
// =======================================
const storage = new CloudinaryStorage({
	cloudinary: cloudinary,
	params: {
		folder: "my-online-store",
		allowed_formats: ["jpg", "jpeg", "png", "gif"],
		transformation: [{ width: 800, height: 600, crop: "limit" }]
	},
});

const upload = multer({
	storage: storage,
	fileFilter: (req, file, cb) => {
		if (file.mimetype.startsWith('image/')) {
			cb(null, true);
		} else {
			cb(new Error('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!'), false);
		}
	},
	limits: {
		fileSize: 5 * 1024 * 1024 // 5MB
	}
});

// =======================================
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (Render)
// =======================================
const pool = new Pool({
	connectionString: process.env.DATABASE_URL,
	ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
	idleTimeoutMillis: 30000,
	connectionTimeoutMillis: 5000,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
async function checkPostgreSQLConnection() {
	let retries = 5;
	while (retries > 0) {
		try {
			const client = await pool.connect();
			console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ");
			client.release();
			return true;
		} catch (err) {
			console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–ø–æ–ø—ã—Ç–æ–∫ left: ${retries}):`, err.message);
			retries -= 1;
			await new Promise(resolve => setTimeout(resolve, 5000));
		}
	}
	throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫");
}

// =======================================
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
// =======================================
async function connectMongoDB() {
	try {
		if (!process.env.MONGODB_URI) {
			throw new Error("MONGODB_URI –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
		}

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		const mongooseOptions = {
			useNewUrlParser: true,
			useUnifiedTopology: true,
			serverSelectionTimeoutMS: 5000,
			socketTimeoutMS: 45000,
		};

		await mongoose.connect(process.env.MONGODB_URI, mongooseOptions);
		console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ");
		console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${mongoose.connection.db?.databaseName}`);

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err.message);
		throw err;
	}
}

// =======================================
// Middleware
// =======================================
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.static(path.join(__dirname)));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
	console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);
	next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Multer
app.use((error, req, res, next) => {
	if (error instanceof multer.MulterError) {
		if (error.code === 'LIMIT_FILE_SIZE') {
			return res.status(400).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 5MB)' });
		}
	}
	next(error);
});

// =======================================
// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã cards (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
// =======================================
async function initializeDatabase() {
	try {
		await pool.query(`
      CREATE TABLE IF NOT EXISTS cards (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        price TEXT NOT NULL,
        description TEXT,
        availability TEXT DEFAULT '–í –Ω–∞–ª–∏—á–∏–∏',
        imgSrc TEXT,
        date TEXT DEFAULT TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD'),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

		await pool.query(`
      CREATE INDEX IF NOT EXISTS idx_cards_name ON cards(name);
    `);

		console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ cards –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", err);
		throw err;
	}
}

// =======================================
// API –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
// =======================================

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
app.get("/api/cards", async (req, res) => {
	try {
		console.log("üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫");
		const { rows } = await pool.query("SELECT * FROM cards ORDER BY created_at DESC");
		console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${rows.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
		res.json(rows);
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫" });
	}
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–î–ù–û–ô –∫–∞—Ä—Ç–æ—á–∫–∏
app.post("/api/cards", upload.single('photo'), async (req, res) => {
	console.log("üì¶ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏");

	try {
		const { name, price, description, availability } = req.body;

		if (!name || !price) {
			return res.status(400).json({ error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
		}

		let imageUrl = '';

		if (req.file) {
			imageUrl = req.file.path;
			console.log("‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Cloudinary:", imageUrl);
		}

		const result = await pool.query(
			`INSERT INTO cards (name, price, description, availability, imgSrc, date) 
       VALUES ($1, $2, $3, $4, $5, $6) 
       RETURNING *`,
			[
				name.toString().trim(),
				price.toString().trim(),
				(description || '').toString().trim(),
				(availability || '–í –Ω–∞–ª–∏—á–∏–∏').toString().trim(),
				imageUrl,
				new Date().toISOString().split('T')[0]
			]
		);

		const newCard = result.rows[0];
		console.log("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î, ID:", newCard.id);

		res.status(201).json(newCard);

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏" });
	}
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
app.delete("/api/cards/:id", async (req, res) => {
	const { id } = req.params;

	try {
		const result = await pool.query(
			"DELETE FROM cards WHERE id = $1 RETURNING *",
			[id]
		);

		if (result.rows.length === 0) {
			return res.status(404).json({ error: "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
		}

		console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ ID: ${id}`);
		res.json({ status: "deleted", id: id });

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏" });
	}
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
app.put("/api/cards/:id", async (req, res) => {
	const { id } = req.params;
	const { name, price, description, availability } = req.body;

	try {
		const result = await pool.query(
			`UPDATE cards 
       SET name = $1, price = $2, description = $3, availability = $4, updated_at = CURRENT_TIMESTAMP 
       WHERE id = $5 
       RETURNING *`,
			[name, price, description, availability, id]
		);

		if (result.rows.length === 0) {
			return res.status(404).json({ error: "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
		}

		console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ ID: ${id}`);
		res.json(result.rows[0]);

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏" });
	}
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID
app.get("/api/cards/:id", async (req, res) => {
	const { id } = req.params;

	try {
		const result = await pool.query(
			"SELECT * FROM cards WHERE id = $1",
			[id]
		);

		if (result.rows.length === 0) {
			return res.status(404).json({ error: "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
		}

		res.json(result.rows[0]);

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏" });
	}
});

// =======================================
// API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω–∞ Cloudinary
// =======================================
app.post("/api/upload", upload.single("photo"), async (req, res) => {
	console.log("üì∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ");

	try {
		if (!req.file) {
			console.error("‚ùå –§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω");
			return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" });
		}

		console.log("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:", req.file.originalname);
		console.log("‚úÖ URL Cloudinary:", req.file.path);

		res.json({
			success: true,
			url: req.file.path,
			message: "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
		});

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", err);
		res.status(500).json({
			error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ",
			message: err.message
		});
	}
});

// =======================================
// Health check endpoint
// =======================================
app.get("/api/health", async (req, res) => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
		await pool.query("SELECT 1");

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º MongoDB
		await mongoose.connection.db.admin().ping();

		res.json({
			status: "OK",
			postgresql: "connected",
			mongodb: "connected",
			timestamp: new Date().toISOString()
		});
	} catch (err) {
		res.status(500).json({
			status: "ERROR",
			error: err.message,
			timestamp: new Date().toISOString()
		});
	}
});

// =======================================
// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
// =======================================
app.use((req, res) => {
	console.warn(`‚ö†Ô∏è  –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.method} ${req.url}`);
	res.status(404).json({ error: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
});

// =======================================
// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
// =======================================
app.use((err, req, res, next) => {
	console.error("üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
	res.status(500).json({
		error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
		message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
	});
});

// =======================================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// =======================================
async function startServer() {
	try {
		// –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
		await checkPostgreSQLConnection();

		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
		await connectMongoDB();

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
		await initializeDatabase();

		// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
		app.listen(PORT, '0.0.0.0', () => {
			console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
			console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
		});

	} catch (err) {
		console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:", err);
		process.exit(1);
	}
}

// =======================================
// Graceful shutdown
// =======================================
async function gracefulShutdown() {
	console.log('\nüîª –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');

	try {
		// –ó–∞–∫—Ä—ã–≤–∞–µ–º PostgreSQL
		await pool.end();
		console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ');

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º MongoDB
		await mongoose.connection.close();
		console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ');

		process.exit(0);
	} catch (err) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', err);
		process.exit(1);
	}
}

process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();


