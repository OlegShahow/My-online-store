


	//   С СОХРАНЕНИЕМ ПОСЛЕ ПЕРЕЗАГРУЗКИ  !!!!!!  ................................................................................................
	// есть кнопка удаления карточки  и кнопка  "статуса "


	// https://drive.google.com/uc?id=FILE_ID пример адреса картинки


	// =======================================
	// Сохраняем все оригинальные комментарии
	// =======================================

	// находим форму и контейнер
	const form = document.getElementById("add-card-form");
	const cardsContainer = document.querySelector(".main__cards");

	// =======================================
	// Вспомогательные функции для хранения
	// =======================================

	// TEMP STORAGE (локальное хранение) -- можно заменить на сервер
	let cards = JSON.parse(localStorage.getItem("cards")) || [];

	function getCards() {
		// === ИЗМЕНЕНИЕ: используем временный массив вместо прямого обращения к localStorage ===
		return cards;
	}

	function saveCards(updatedCards) {
		// === ИЗМЕНЕНИЕ: обновляем временный массив и localStorage ===
		cards = updatedCards;
		localStorage.setItem("cards", JSON.stringify(cards));
	}

	// =======================================
	// Функция рендера карточки
	// =======================================
	function renderCard(card) {
		const newCard = document.createElement("div");
		newCard.classList.add("item--card");

		newCard.innerHTML = `
    <div class="item--info">
      <div class="info--public">
        <div class="item--name adds"><p>${card.name}</p></div>
        <div class="item--prize adds"><p>${card.price} <img src="./icon/g1.png" alt="@"></p></div>
        <div class="item--foto adds"><img src="${card.imgSrc}" alt="${card.name}"></div>
        <div class="item--about adds">
          <button class="ab">О товаре</button>
          <div class="description"><p>${card.desc}</p></div>
        </div>
        <div class="item--availability adds">${card.availability}</div>
        <div class="item--korzina">
          <button type="button" class="korz--btn">
               <img src="./icon/k2.png" alt="Корзина">
          </button>
        </div>
      </div>
      <div class="info--admin">
        <div class="admin--delite"><button class="del">Удалить товар</button></div>
        <div class="admin--status"><button class="stat">Статус</button></div>
      </div>
    </div>
  `;

		cardsContainer.appendChild(newCard);

		// кнопка "О товаре" -- для одной !! не querySelectorAll
		const abButton = newCard.querySelector(".ab");
		const description = newCard.querySelector(".description");
		abButton.addEventListener("click", () => {
			description.style.display = description.style.display === "flex" ? "none" : "flex";
		});

		// удаление карточки из панели админа -- для одной !! не querySelectorAll
		const delButton = newCard.querySelector(".del");
		delButton.addEventListener("click", () => {
			newCard.remove();
			const updatedCards = getCards().filter(
				c => !(c.name === card.name && c.price === card.price)
			);
			saveCards(updatedCards);
		});

		// кнопка "Статус" -- для одной !! не querySelectorAll
		const statButton = newCard.querySelector(".stat");
		const ava = newCard.querySelector(".item--availability");
		statButton.addEventListener("click", () => {
			// меняем текст статуса
			const newStatus = ava.textContent === "В наличии" ? "В дороге" : "В наличии";
			ava.textContent = newStatus;

			// сохраняем новый статус в TEMP STORAGE
			let updatedCards = getCards();
			const cardIndex = updatedCards.findIndex(
				c => c.name === card.name && c.price === card.price
			);
			if (cardIndex !== -1) {
				updatedCards[cardIndex].availability = newStatus;
				saveCards(updatedCards);
			}
		});
	}

	// =======================================
	// Загрузка карточек из localStorage при старте
	// =======================================
	getCards().forEach(renderCard);

	// =======================================
	// Добавление новой карточки
	// =======================================
	form.addEventListener("submit", (event) => {
		event.preventDefault();

		const name = form.name.value.trim();
		const price = form.price.value.trim();
		const desc = form.desc.value.trim();
		const availability = form.availability.value.trim();
		const imgUrl = form.imgUrl.value.trim();

		if (!name || !price || !imgUrl) {
			alert("Заполните обязательные поля: название, цену и ссылку на картинку.");
			return;
		}

		const card = { name, price, desc, availability, imgSrc: imgUrl };

		// сохраняем и рендерим
		const allCards = getCards();
		allCards.push(card);
		saveCards(allCards);
		renderCard(card);

		form.reset();
	});

	// =======================================
	// КОММЕНТАРИИ ИЗМЕНЕНИЙ
	// =======================================
	// 1. Добавлен временный массив cards для удобной замены localStorage на сервер позже.
	// 2. getCards() и saveCards() теперь работают с временным массивом, но синхронизируют localStorage.
	// 3. Все места сохранения или изменения данных отмечены как "=== ИЗМЕНЕНИЕ ===".
	// 4. Можно в будущем заменить getCards() и saveCards() на async fetch к API сервера.

	